edata
head(edata)
head(edata[, 1])
mm = log2(edata[,1]+1) - log2(edata[,2]+1)
aa = log2(edata[,1]+1) + log2(edata[,2]+1)
plot(aa,mm,col=2)
plot(aa,mm,col="steelblue")
mm = rlog(edata[,1]+1) - rlog(edata[,2]+1)
aa = rog(edata[,1]+1) + rlog(edata[,2]+1)
install.packages("DESeq2")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
mm = rlog(edata[,1]+1) - rlog(edata[,2]+1)
mm = rlog(edata[,1]+1) - rlog(edata[,2]+1)
aa = rlog(edata[,1]+1) + rlog(edata[,2]+1)
mm = log2(edata[,1]+1) - log2(edata[,2]+1)
aa = log2(edata[,1]+1) + log2(edata[,2]+1)
mm = rlog(edata[,1]+1) - rlog(edata[,2]+1)
mm = rlog(edata[,1]) - rlog(edata[,2])
aa = rlog(edata[,1]) + rlog(edata[,2])
se
metadata(se)
abstract(se)
bm
gr1 <- GRanges(c("chr1", "chr2"), IRanges(start=c(32, 95), width=c(24, 123)))
gr2 <- GRanges(c("chr8", "chr2"), IRanges(start=c(27, 12), width=c(42, 34)))
gr1
gr2
grl <- GRangesList(gr1, gr2)
grl
unlist(grl)
library(GenomicRanges)
gr1 <- GRanges(c("chr1", "chr2"), IRanges(start=c(32, 95), width=c(24, 123)))
gr2 <- GRanges(c("chr8", "chr2"), IRanges(start=c(27, 12), width=c(42, 34)))
gr1
gr2
grl <- GRangesList(gr1, gr2)
grl
unlist(grl)
doubled_grl <- c(grl, grl)
length(doubled_grl)
doubled_grl[2]
doubled_grl[[2]]
seqnames(grl)
start(grl)
seqnames(grl)
start(grl)
grl
start(grl)
chrs <- c("chr3", "chr1", "chr2", "chr2", "chr3", "chr1")
gr <- GRanges(chrs, IRanges(sample(1:100, 6, replace=TRUE),
width=sample(3:30, 6, replace=TRUE)))
chrs <- c("chr3", "chr1", "chr2", "chr2", "chr3", "chr1")
gr <- GRanges(chrs, IRanges(sample(1:100, 6, replace=TRUE),
width=sample(3:30, 6, replace=TRUE)))
head(gr)
seqnames(gr)
gr_split <- split(gr, seqnames(gr))
gr_split[[1]]
names(gr_split)
lapply(gr_split, function(x) order(width(gr_split)))
lapply(gr_split, function(x) order(width(x)))
gr_split <- split(gr, seqnames(gr))
gr_split
sapply(gr_split, function(x) min(start(x)))
sapply(gr_split, length)
elementLengths(gr_split)
elementLengths(gr_split)
elementNROWS(gr_split)
install.packages("mvrnorm")
library(MASS)
library(heatmaply)
str(genes)
source('~/.active-rstudio-document')
str(genes)
head(genes)
heatmaply(genes, k_row = 2, k_col = 2)
dim(genes)
genes <- simulateExprData(n = 300, n0 = 150, p = 250,
rho0 = 0.01, rho1 = 0.95)
heatmaply(genes, k_row = 2, k_col = 2)
heatmaply(cor(genes), k_row = 2, k_col = 2)
heatmaply(cor(genes))
heatmaply(cor(genes), colors = BrBG)
heatmaply(cor(genes), colors = YlOrBr)
2/0
head(mtcars)
mtcars$mpg
mtcars["mpg"]
mtcars$mpg[3]
mtcars$mpg[mtcars$mp>25]
mtcars$mpg[mtcars$hp>25]
5/Inf
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bodymap_eset.RData")
load(file=con)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bodymap_eset.RData")
load(file=con)
close(con)
bm = bodymap.eset
edata = exprs(bm)
pdata_bm=pData(bm)
head(pdata_bm)
typeof(pdata_bm)
str(pdata_bm)
class(pdata_bm)
head(bm)
bm
pdata_bm
head(bm)
head(pdata_bm)
head(edata)
lm1 = lm(edata[1,] ~ pdata_bm$num.tech.reps)
plot(pdata_bm$num.tech.reps, edata[1,])
abline(lm1)
head(pdata_bm)
lm2 = lm(edata[1,] ~ pdata_bm$age+pdata_bm$gender)
lm2
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
edata = log2(as.matrix(edata) + 1)
mod1 = model.matrix( ~ pdata$population)
fit1 = lm.fit(mod1, t(edata))
dim(fit1$residuals)
dim(fit1$effects)
dim(fit1$coefficients)
fit1
str(fit1)
na.cols = pdata_bm$sample.id[is.na(pdata_bm$age == 'NA')]
edata.rm.age.na = edata[, !(colnames(edata) %in% na.cols)]
pdata_bm.rm.na = pdata_bm[!(rownames(pdata_bm) %in% na.cols),]
mod2 = model.matrix( ~ pdata_bm.rm.na$age)
fit.limma = lmFit(edata.rm.age.na, mod2)
library(limma)
na.cols = pdata_bm$sample.id[is.na(pdata_bm$age == 'NA')]
edata.rm.age.na = edata[, !(colnames(edata) %in% na.cols)]
pdata_bm.rm.na = pdata_bm[!(rownames(pdata_bm) %in% na.cols),]
mod2 = model.matrix( ~ pdata_bm.rm.na$age)
fit.limma = lmFit(edata.rm.age.na, mod2)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bodymap_eset.RData")
load(file=con)
close(con)
bm = bodymap.eset
edata = exprs(bm)
pdata_bm=pData(bm)
na.cols = pdata_bm$sample.id[is.na(pdata_bm$age == 'NA')]
edata.rm.age.na = edata[, !(colnames(edata) %in% na.cols)]
pdata_bm.rm.na = pdata_bm[!(rownames(pdata_bm) %in% na.cols),]
mod2 = model.matrix( ~ pdata_bm.rm.na$age)
fit.limma = lmFit(edata.rm.age.na, mod2)
fit.limma$coefficients[1000,]
plot(pdata_bm.rm.na$age, edata.rm.age.na[1000,])
mod2_adj = model.matrix( ~ pdata_bm.rm.na$age + as.factor(pdata_bm.rm.na$tissue.type))
fit.limma.adj = lmFit(edata.rm.age.na, mod2_adj)
set.seed(33353)
library(sva)
install.packages("sva")
source("https://bioconductor.org/biocLite.R")
biocLite("sva")
biocLite('snpStats')
set.seed(33353)
library(sva)
library(snpStats)
edata.trans = log2(edata + 1)
edata.trans = edata.trans[rowMeans(edata.trans) >= 1, ]
na.cols = pdata_bm$sample.id[is.na(pdata_bm$age == 'NA')]
edata.rm.na = edata.trans[, !(colnames(edata.trans) %in% na.cols)]
pdata_bm.rm.na = pdata_bm[!(rownames(pdata_bm) %in% na.cols),]
mod = model.matrix( ~ pdata_bm.rm.na$age, data = pdata_bm.rm.na)
mod0 = model.matrix(~1, data=pdata_bm.rm.na)
sva1 = sva(edata.rm.na, mod, mod0, n.sv=1)
cor(sva1$sv, pdata_bm.rm.na$age)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
edata2 = log2(edata + 1)
edata3 = edata2 - rowMeans(edata2)
edata1 = edata
svd1 = svd(edata1)
svd2 = svd(edata2)
svd3 = svd(edata3)
(svd1$d^2/sum(svd1$d^2))[1] # 0.8873421
(svd2$d^2/sum(svd2$d^2))[1] # 0.9737781
(svd3$d^2/sum(svd3$d^2))[1] # 0.3463729
names(svd1)
plot(svd1$d^2/sum(svd1$d^2),ylab="Percent Variance Explained",col=2)
library(RSkittleBrewer)
trop = RSkittleBrewer("tropical")
palette(trop)
par(pch=19)
plot(svd1$d^2/sum(svd1$d^2),ylab="Percent Variance Explained",col=2)
edata_norm = log2(edata + 1) - rowMeans(log2(edata + 1))
set.seed(333)
svd_norm = svd(edata_norm)
set.seed(333)
edata_kms = kmeans(t(edata), 2)
edata_kms = kmeans(t(edata), 2)
cor(svd_norm$v[,1], as.numeric(edata_kms$cluster))
edata_norm = log2(edata + 1) - rowMeans(log2(edata + 1))
svd_norm = svd(edata_norm)
set.seed(333)
edata_kms = kmeans(t(edata), 2)
cor(svd_norm$v[,1], as.numeric(edata_kms$cluster))
edata_norm = log2(edata + 1) - rowMeans(log2(edata + 1))
svd_norm = svd(edata_norm)
set.seed(333)
edata_kms = kmeans(t(edata), 2)
cor(svd_norm$v[,1], as.numeric(edata_kms$cluster))
edata2 = log2(edata + 1)
edata3 = edata2 - rowMeans(edata2)
edata1 = edata
svd1 = svd(edata1)
svd2 = svd(edata2)
svd3 = svd(edata3)
set.seed(333)
edata3.kms = kmeans(t(edata3), 2)
cor(svd3$v[,1], as.numeric(edata3.kms$cluster)) # -0.8678247
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bodymap_eset.RData")
load(file=con)
close(con)
bm = bodymap.eset
edata = exprs(bm)
pdata_bm=pData(bm)
lm1 = lm(edata[1,] ~ pdata_bm$num.tech.reps)
plot(pdata_bm$num.tech.reps, edata[1,])
abline(lm1)
lm2 = lm(edata[1,] ~ pdata_bm$age+pdata_bm$gender)
lm2
library(limma)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bodymap_eset.RData")
load(file=con)
close(con)
bm = bodymap.eset
edata = exprs(bm)
pdata_bm=pData(bm)
na.cols = pdata_bm$sample.id[is.na(pdata_bm$age == 'NA')]
edata.rm.age.na = edata[, !(colnames(edata) %in% na.cols)]
pdata_bm.rm.na = pdata_bm[!(rownames(pdata_bm) %in% na.cols),]
mod2 = model.matrix( ~ pdata_bm.rm.na$age)
fit.limma = lmFit(edata.rm.age.na, mod2)
fit.limma$coefficients[1000,]
# (Intercept) pdata_bm$age
#  2469.87375    -27.61178
plot(pdata_bm.rm.na$age, edata.rm.age.na[1000,])
set.seed(33353)
library(sva)
library(snpStats)
edata.trans = log2(edata + 1)
edata.trans = edata.trans[rowMeans(edata.trans) >= 1, ]
na.cols = pdata_bm$sample.id[is.na(pdata_bm$age == 'NA')]
edata.rm.na = edata.trans[, !(colnames(edata.trans) %in% na.cols)]
pdata_bm.rm.na = pdata_bm[!(rownames(pdata_bm) %in% na.cols),]
mod = model.matrix( ~ pdata_bm.rm.na$age, data = pdata_bm.rm.na)
mod0 = model.matrix(~1, data=pdata_bm.rm.na)
sva1 = sva(edata.rm.na, mod, mod0, n.sv=1)
cor(sva1$sv, pdata_bm.rm.na$age)
cor(sva1$sv, pdata_bm.rm.na$race)
pdata_bm.rm.na
cor(sva1$sv, as.factor(pdata_bm.rm.na$race))
cor(sva1$sv, as.numeric(as.factor(pdata_bm.rm.na$race)))
cor(sva1$sv, as.numeric(as.factor(pdata_bm.rm.na$age)))
install.packages('/Users/igorhut/Downloads/ShadowRegression_1.0.tar.gz', repos = NULL, type = 'source')
library(ShadowRegression)
?ShadowRegression::
?ShadowRegression
library(ShadowRegression)
install.packages("BgeeDB")
source("https://bioconductor.org/biocLite.R")
?BiocUpgrade
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("https://bioconductor.org/biocLite.R")
version
biocLite("BgeeDB")
bgee <- Bgee$new(species = "Homo_sapiens", dataType = "rna_seq")
library(BgeeDB)
bgee <- Bgee$new(species = "Homo_sapiens", dataType = "rna_seq")
myAnnotation <- getAnnotation(bgee)
library(XML)
xmlfile = xmlTreeParse("ftp://ftp.ncbi.nlm.nih.gov/dbgap/studies/phs000424/phs000424.v7.p2/pheno_variable_summaries/phs000424.v7.pht002742.v7.p2.GTEx_Subject_Phenotypes.var_report.xml")
xml_file = xmlTreeParse("ftp://ftp.ncbi.nlm.nih.gov/dbgap/studies/phs000424/phs000424.v7.p2/pheno_variable_summaries/phs000424.v7.pht002742.v7.p2.GTEx_Subject_Phenotypes.var_report.xml")
class(xml_file)
topxml = xmlRoot(xml_file)
class(topxml)
str(top_xml)
View(topxml)
rm topxml
rm(topxml)
top_xml = xmlRoot(xml_file)
class(top_xml)
str(top_xml)
top_xml = xmlSApply(top_xml, function(x) xmlSAplly(x, xmlValue))
top_xml = xmlSApply(top_xml, function(x) xmlSApply(x, xmlValue))
xml_df = data.frame(t(top_xml),
row.names = NULL)
str(xml_df)
head(xml_df)
head(xml_df[1])
head(xml_df[1:2])
install.packages("SPARQL")
library(SPARQL)
library(ggplot2)
endpoint = "http://services.data.gov/sparql"
# Define the data.gov endpoint
endpoint = "http://services.data.gov/sparql"
# Create query statement
query = "PREFIX dgp1187: <http: data-gov.tw.rpi.edu="" vocab="" p="" 1187="">
SELECT ?ye ?fi ?ac
WHERE {
?s dgp1187:year ?ye .
?s dgp1187:fires ?fi .
?s dgp1187:acres ?ac .
}"
# Create query statement
query = "PREFIX dgp1187: <http://data-gov.tw.rpi.edu/vocab/p/1187/>
SELECT ?ye ?fi ?ac
WHERE {
?s dgp1187:year ?ye .
?s dgp1187:fires ?fi .
?s dgp1187:acres ?ac .
}"
qd = SPARQL(endpoint, query)
qd = SPARQL(endpoint, query)
# Define the data.gov endpoint
endpoint <- "http://services.data.gov/sparql"
# create query statement
query <-
"PREFIX  dgp1187: <http://data-gov.tw.rpi.edu/vocab/p/1187/>
SELECT ?ye ?fi ?ac
WHERE {
?s dgp1187:year ?ye .
?s dgp1187:fires ?fi .
?s dgp1187:acres ?ac .
}"
# Step 2 - Use SPARQL package to submit query and save results to a data frame
qd <- SPARQL(endpoint,query)
# create query statement
query <-
"PREFIX  dgp1187: <http://data-gov.tw.rpi.edu/vocab/p/1187/>
SELECT ?ye ?fi ?ac
WHERE {
?s dgp1187:year ?ye .
?s dgp1187:fires ?fi .
?s dgp1187:acres ?ac .
}"
# Step 2 - Use SPARQL package to submit query and save results to a data frame
qd <- SPARQL(endpoint,query)
install.packages("rJava") # if not present already
library(rJava)
library(rJava)
install.packages("rJava") # if not present already
library(devtools)
install_github("egonw/rrdf", subdir="rrdflibs")
(.jinit();.jcall("java/lang/System", "S", "getProperty", "java.runtime.version"))
.jinit();.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
install.packages('rJava', type='source')
version()
version
mean(c(2.23, 3.45, 1.87, 2.11, 7.33, 18.34, 19.23))
1:25
sum(c(1:25)^2)
class(cars)
nrow(cars)
head(cars)
mean(cars$dist)
which(cars$dist == 85)
cars[which(cars$dist == 85)]
cars[which(cars$dist == 85), ]
vcf_vep = readVcf("~/Documents/GitHub/ASE_MBASED/G20479.vep.vcf")
vcf_phased =  readVcf("~/Documents/GitHub/ASE_MBASED/G20479.vep.phased.vcf")
vcf_vep<- vcf_vep[isSNV(vcf_vep)]
dim(vcf_vep)
vcf_phased <- vcf_phased[isSNV(vcf_phased)]
dim(vcf_phased)
vcf_vep = readVcf("~/Documents/GitHub/ASE_MBASED/G20479.vep.vcf")
library(VariantAnnotation)
library(SummarizedExperiment)
library(GenomicRanges)
vcf_vep = readVcf("~/Documents/GitHub/ASE_MBASED/G20479.vep.vcf")
vcf_phased =  readVcf("~/Documents/GitHub/ASE_MBASED/G20479.vep.phased.vcf")
vcf_phased =  readVcf("~/Documents/GitHub/ASE_MBASED/G20479.vep.phased.vcf")
vcf_phased =  readVcf("~/Documents/GitHub/ASE_MBASED/G20479.phased.veo.vcf")
vcf_phased =  readVcf("~/Documents/GitHub/ASE_MBASED/G20479.phased.vep.vcf")
vcf_phased =  readVcf("~/Documents/GitHub/ASE_MBASED/G20479.vep.phased.gz")
vcf_vep<- vcf_vep[isSNV(vcf_vep)]
dim(vcf_vep)
vcf_phased <- vcf_phased[isSNV(vcf_phased)]
dim(vcf_phased)
sum(rownames(geno(vcf_vep)$GT) != rownames(geno(vcf_phased)$GT))
head(geno(vcf_vep)$GT)
head(geno(vcf_phased)$GT)
vcf_phased <- vcf_phased[as.vector(geno(vcf_phased)$GT!='1|1')]
sum(rownames(geno(vcf_vep)$GT) != rownames(geno(vcf_phased)$GT))
vcf_vep = readVcf("~/Documents/GitHub/ASE_MBASED/G20479.vep.vcf")
vcf_phased =  readVcf("~/Documents/GitHub/ASE_MBASED/G20479.vep.phased.gz")
vcf_vep<- vcf_vep[isSNV(vcf_vep)]
dim(vcf_vep)
vcf_phased <- vcf_phased[isSNV(vcf_phased)]
dim(vcf_phased)
vcf_vep
vcf_phased
info(vcf_vep)
rowRanges(vcf_vep)
rowRanges(vcf_phased)
head(geno(vcf_vep)$GT)
head(geno(vcf_phased)$GT)
sum(rownames(geno(vcf_vep)$GT) != rownames(geno(vcf_phased)$GT))
vcf_phased <- vcf_phased[as.vector(geno(vcf_phased)$GT!='1|1')]
vcf_vep<-vcf_vep[rownames(vcf_phased)]
dim(c(vcf_phased, vcf_vep))
dim(vcf_phased)
dim(vcf_vep)
rowRanges(vcf_vep)
head(rowRanges(vcf_vep)$REF)
head(rowRanges(vcf_vep)$REF$seq)
head(unlist(rowRanges(vcf_vep)$REF))
head(as.data.frame(rowRanges(vcf_vep)$REF))
head(unlist(rowRanges(vcf_vep)$REF))
head(as.data.frame(rowRanges(vcf_vep)$REF))
head(as.data.frame(rowRanges(vcf_vep)$REF)$x)
vcf_vep
head(info(vcf_vep)$AC)
head(info(vcf_vep)$AN)
head(unlist(info(vcf_vep)$AC))
head(as.data.frame(rowRanges(vcf_vep)$ALT)$x)
head(as.data.frame(rowRanges(vcf_vep)$ALT))
head(as.data.frame(rowRanges(vcf_vep)$ALT)$value)
head(geno(vcf_phased)$GT)
head(unlist(geno(vcf_phased)$GT))
head(geno(vcf_phased)$GT$HCC1143)
str(geno(vcf_phased)$GT)
head(unname(geno(vcf_phased)$GT))
head(as.vector(unname(geno(vcf_phased)$GT)))
#Packaging of working df
head(as.data.frame(rowRanges(vcf_vep)$REF)$x)
head(as.data.frame(rowRanges(vcf_vep)$ALT)$value)
head(unlist(info(vcf_vep)$AC))
head(info(vcf_vep)$AN)
head(as.vector(unname(geno(vcf_phased)$GT)))
#Packaging of working df
head(a = as.data.frame(rowRanges(vcf_vep)$REF)$x)
mean(x = c(1,3,3))
mean(x <-  c(1,3,3))
head(unlist(info(vcf_vep)$AC))
head(info(vcf_vep)$AN)
mamatata_df = data.frame(Ph1 = as.data.frame(rowRanges(vcf_vep)$REF)$x,
Ph2 =  as.data.frame(rowRanges(vcf_vep)$ALT)$value,
AC = unlist(info(vcf_vep)$AC),
RefC = as.vector(unname(geno(vcf_phased)$GT)) - unlist(info(vcf_vep)$AC))
head(as.vector(unname(geno(vcf_phased)$GT)))
head(info(vcf_vep)$AN)
head(unlist(info(vcf_vep)$AC))
mamatata_df = data.frame(Ph1 = as.data.frame(rowRanges(vcf_vep)$REF)$x,
Ph2 =  as.data.frame(rowRanges(vcf_vep)$ALT)$value,
AC = unlist(info(vcf_vep)$AC),
RefC = info(vcf_vep)$AN - unlist(info(vcf_vep)$AC))
head(mamatata_df)
mamatata_df = data.frame(Ph1 = as.data.frame(rowRanges(vcf_vep)$REF)$x,
Ph2 =  as.data.frame(rowRanges(vcf_vep)$ALT)$value,
Ph1_count = unlist(info(vcf_vep)$AC),
Ph2_count = info(vcf_vep)$AN - unlist(info(vcf_vep)$AC),
phasing_info = as.vector(unname(geno(vcf_phased)$GT)))
head(mamatata_df)
names(rowRanges(vcf_phased))
rownames(mamatata_df) = names(rowRanges(vcf_phased))
head(mamatata_df)
#Swap Ph1, Ph2, Ph1_count, Ph2_count for phasing_info = 1|0
mamatata_df[mamatata_df$phasing_info == "1|0", c("Ph1", "Ph2", "Ph1_count", "Ph2_count")] <-
mamatata_df[mamatata_df$phasing_info == "1|0", c("Ph2", "Ph1", "Ph2_count", "Ph1_count")]
head(mamatata_df)
library("knitr")
library("VariantAnnotation")
library("MBASED")
library("BiocParallel")
library('ggplot2')
library(plotly)
library(ggplot2)
library(plotly)
library(rtracklayer)
vcf = readVcf('GSM1206240.decontaminated.genome.split.realigned.recalibrated.hc.vep_phased.vcf')
setwd("~/Documents/GitHub/ASE_MBASED")
vcf = readVcf('GSM1206240.decontaminated.genome.split.realigned.recalibrated.hc.vep_phased.vcf')
vcf <- vcf[isSNV(vcf)]
vcf <- vcf[as.vector(geno(vcf)$PH_info!='1|1')]
vcf <- vcf[lapply(info(vcf)$CSQ,length)>0]
vepD <- info(header(vcf))[c("CSQ"),]$Description
vepD <- strsplit(vepD,'Format:', fixed=TRUE)[[1]][2]
vepD <- trimws(vepD, ("b"))
vepD <- strsplit(vepD,'|', fixed=TRUE)[[1]]
pos  <- match("SYMBOL", vepD)
posID  <- match("Gene", vepD)
vcf <- vcf[sapply(info(vcf)$CSQ, function(x) sum(grepl('exon',x)))>0]
mutInGene <- function(x, p){ s = x[grepl('exon',x)]; strsplit(s[1], '|', fixed=TRUE)[[1]][p]}
geneName <- function(x, p){
l = as.character(lapply(x, mutInGene, p))
paste(unique(l), sep='',collapse = ';')
}
geneList <- sapply(info(vcf)$CSQ, geneName, posID)
geneNameList <- sapply(info(vcf)$CSQ, geneName, pos)
if(length(vcf)==0){
message ("No alleles in Genes")
quit()
}
